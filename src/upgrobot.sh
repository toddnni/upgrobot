#!/bin/sh

set -e
set -u

UPGROBOT_SCRIPT_DIR="${UPGROBOT_SCRIPT_DIR:-$(realpath $(dirname $0))}"
UPGROBOT_CLONE_DIR="${UPGROBOT_CLONE_DIR:-$(mktemp -d)}"
UPGROBOT_GENERIC_MSG="The change was generated by script %UPGROBOT_UPDATE_SCRIPT%"
UPGROBOT_PR_BRANCH_PREFIX="upgrobot-"

help() {
	echo "usage: $0 parameters [-h]"
	echo
	echo "Runs an update script in a target repository and creates a PR"
	echo "The parameters can be passed as environment variables also. See the variable names below."
	echo
	echo "The mandatory parameters"
	echo "-r UPGROBOT_GIT_URL    The target repository HTTP URL to pull. Currently supports only HTTP URLs."
	echo "-u UPGROBOT_GIT_USER   The username to authenticate to the git server."
	echo "-p UPGROBOT_GIT_PASS   The password to authenticate to the git server. Prefer using environment variable here."
	echo "-b UPGROBOT_GIT_BRANCH The git branch to target."
	echo "-e UPGROBOT_GIT_EMAIL  The email address in the commit message. The commit username is auth username."
	echo "-t UPGROBOT_LEADING_TITLE The title that is prepended to PR. Will be used to search for the old PR."
	echo "-U UPGROBOT_UPDATE_SCRIPT The update script, either path or name that will be searched in from the default path."
	echo "-P UPGROBOT_PR_SCRIPT  The script that is used for PR, either path or name that will be searched from the default path."
	echo
	echo "The optional parameters"
	echo "-D UPGROBOT_SCRIPT_DIR The directory to look for the scripts. First searches exact match from the target repository and then this directory. Current value '$UPGROBOT_SCRIPT_DIR'."
	echo "-D UPGROBOT_CLONE_DIR  The directory where to clone the repository. Supports existing directory, but not well tested. Current value '$UPGROBOT_CLONE_DIR'."
	echo "-m UPGROBOT_GENERIC_MSG The message to add to the commit messages and similar to indicate the automatic change. Some variables are templated in this message. Current value '$UPGROBOT_GENERIC_MSG'."
	echo "-B UPGROBOT_PR_BRANCH_PREFIX  The prefix of the temporary branch that is used for PR. Current value '$UPGROBOT_PR_BRANCH_PREFIX'."
	echo "-h Prints this help text"
}

find_script() {
	# Assumes that we are in the target repository
	if [ -f "$1" ]
	then
		echo "$1"
		return 0
	elif [ -f "$UPGROBOT_SCRIPT_DIR/$1" ]
	then
		echo "$UPGROBOT_SCRIPT_DIR/$1"
		return 0
	else
		echo "Error: Could not find script '$1', either directly of from '$UPGROBOT_SCRIPT_DIR'!">&2
		return 1
	fi
}

UPGROBOT_GIT_URL="${UPGROBOT_GIT_URL:-}"
UPGROBOT_GIT_USER="${UPGROBOT_GIT_USER:-}"
UPGROBOT_GIT_PASS="${UPGROBOT_GIT_PASS:-}"
UPGROBOT_GIT_BRANCH="${UPGROBOT_GIT_BRANCH:-}"
UPGROBOT_GIT_EMAIL="${UPGROBOT_GIT_EMAIL:-}"
UPGROBOT_LEADING_TITLE="${UPGROBOT_LEADING_TITLE:-}"
UPGROBOT_UPDATE_SCRIPT="${UPGROBOT_UPDATE_SCRIPT:-}"
UPGROBOT_PR_SCRIPT="${UPGROBOT_PR_SCRIPT:-}"

while getopts r:u:p:b:e:t:U:P:D:m:B:h arg
do
	case "$arg" in
		r)
			UPGROBOT_GIT_URL="$OPTARG"
			;;
		u)
			UPGROBOT_GIT_USER="$OPTARG"
			;;
		p)
			UPGROBOT_GIT_PASS="$OPTARG"
			;;
		b)
			UPGROBOT_GIT_BRANCH="$OPTARG"
			;;
		e)
			UPGROBOT_GIT_EMAIL="$OPTARG"
			;;
		t)
			UPGROBOT_LEADING_TITLE="$OPTARG"
			;;
		U)
			UPGROBOT_UPDATE_SCRIPT="$OPTARG"
			;;
		P)
			UPGROBOT_PR_SCRIPT="$OPTARG"
			;;
		D)
			UPGROBOT_SCRIPT_DIR="$OPTARG"
			;;
		m)
			UPGROBOT_GENERIC_MSG="$OPTARG"
			;;
		B)
			UPGROBOT_PR_BRANCH_PREFIX="$OPTARG"
			;;
		h)
			help
			exit 0
			;;
		*)
			help>&2
			exit 1
			;;
	esac
done

if [ -z "$UPGROBOT_GIT_URL" ] || \
	[ -z "$UPGROBOT_GIT_USER" ] || \
	[ -z "$UPGROBOT_GIT_PASS" ] || \
	[ -z "$UPGROBOT_GIT_BRANCH" ] || \
	[ -z "$UPGROBOT_GIT_EMAIL" ] || \
	[ -z "$UPGROBOT_LEADING_TITLE" ] || \
	[ -z "$UPGROBOT_UPDATE_SCRIPT" ] || \
	[ -z "$UPGROBOT_PR_SCRIPT" ]
then
	echo "Error: Some mandatory parameters missing!">&2
	help>&2
	exit 1
fi

echo "# 1. Pull the repository"
(
	export UPGROBOT_GIT_URL
	export UPGROBOT_GIT_USER
	export UPGROBOT_GIT_PASS
	export UPGROBOT_GIT_BRANCH
	export UPGROBOT_CLONE_DIR
	"$UPGROBOT_SCRIPT_DIR/pull.sh" 
)

cd "$UPGROBOT_CLONE_DIR"
export UPGROBOT_SCRIPT_DIR

echo "# 2. Do the changes"
changes=$(
	script=$(find_script "$UPGROBOT_UPDATE_SCRIPT")
	"$script"
)
echo "Got the following instructions:"
echo "$changes"

echo "# 3. Evaluate the changes"
diff=$(
	script=$(find_script "diff.sh" )
	"$script"
)
echo "$diff"
if echo "$diff" | tail -1 | grep -qi "No changes"
then
	exit 0
fi

echo "# 4. Create a PR"
echo "$changes" | (
	read descriptive_title || true # Will be checked later if this is empty
	read line || true # Will be checked later if this is empty
	if [ -n "$line" ]
	then
		echo "Error: Reading change output. Expecting an empty line, got '$line'!">&2
		exit 1
	fi
	commit_message_input=""
	# This reads commit message
	while read line
	do
		if [ -z "$line" ]
		then
			break
		fi
		commit_message_input="$commit_message_input$line
"
	done
	# The last part already read the empty line and if there are extra lines, they will be read to instructions
	instructions=""
	while read line
	do
		if [ -z "$line" ]
		then
			break
		fi
		instructions="$instructions$line
"
	done
	if [ -z "$descriptive_title" ] || [ -z "$commit_message_input" ]
	then
		echo "Error: Title or commit input from change script is missing!">&2
		exit 1
	fi

	generic_message=$(echo "$UPGROBOT_GENERIC_MSG" | sed -e "s|%UPGROBOT_UPDATE_SCRIPT%|$UPGROBOT_UPDATE_SCRIPT|")
	commit_message="$descriptive_title

$commit_message_input

$generic_message"
	pr_title="$UPGROBOT_LEADING_TITLE: $descriptive_title"
	pr_message="$commit_message_input

$generic_message

$instructions"

	export commit_message
	export pr_title
	export pr_message
	export UPGROBOT_GIT_URL
	export UPGROBOT_GIT_USER
	export UPGROBOT_GIT_PASS
	export UPGROBOT_GIT_BRANCH
	export UPGROBOT_GIT_EMAIL
	export UPGROBOT_LEADING_TITLE
	export UPGROBOT_PR_BRANCH_PREFIX
	script=$(find_script "$UPGROBOT_PR_SCRIPT")
	"$script"
)
